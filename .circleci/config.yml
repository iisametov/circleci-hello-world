version: 2.1

aliases:
  - &step_process_dotenv
      run:
        name: Process .env file variables
        command: echo "export $(grep -v '^#' .env | xargs)" >> $BASH_ENV

orbs:
  slack: circleci/slack@3.4.2
  
jobs:
  build:
    docker:
      - image: cimg/openjdk:11.0.8-browsers

    environment:
      JVM_OPTS: -Xmx3200m
      
    steps:
        - checkout
        - run:
            name: install latest chrome
            command: |
             sudo apt-get update
              sudo apt-get install libxml2-utils
            
        - run:
            name: Build slack message
            command: |
             pwd
             echo 'export TOTAL_TESTS=$(xmllint  --xpath "string(//div[@id='tests']/div)" index.html)' >> $BASH_ENV
             echo 'export FAILED_TESTS=$(xmllint  --xpath "string(//div[@id='failures']/div)" index.html)' >> $BASH_ENV
             source $BASH_ENV
              echo $TOTAL_TESTS
              echo $FAILED_TESTS
            when: always

        - run:
            name: check
            command: |
              pwd
              echo $TOTAL_TESTS
              echo $FAILED_TESTS
              xmllint  --xpath "string(//div[@id='tests']/div)" index.html
              xmllint  --xpath "string(//div[@id='failures']/div)" index.html
              tests=$(xmllint  --xpath "string(//div[@id='tests']/div)" index.html)
              failed=$(xmllint  --xpath "string(//div[@id='failures']/div)" index.html)
              echo $tests+$failed
              tot="$tests+$failed\n"
              echo $tot
              export tyt=$tot
              echo 'export TOTALLL="$tests+$failed"' >> $BASH_ENV
              echo 'export TOTALLLL=A75' >> $BASH_ENV
              echo $TOTALLL
              echo $TOTALLLL
              ls
            when: always

      ##############################
        - run:
            name: set var
            command: echo "export BAZ=baz.`date +%Y%m%d.%H%M`" >> $BASH_ENV

        - run:
            name: set var 2
            command: echo "export BAZZ=baz.`$tot`" >> $BASH_ENV

        - run:
            name: "Setup custom environment variables"
            command: echo 'export MY_ENV_VAR="FOO"' >> $BASH_ENV
        - run: # print the name of the branch we're on
            name: "tests?"
            command: echo ${tests}
      # Run another step, the same as above; note that you can
      # invoke environment variable without curly braces.
        - run:
            name: "failures?"
            command: echo ${failed}
        - run:
            name: "What was my custom environment variable?"
            command: echo ${MY_ENV_VAR}
        - run:
            name: "Print total"
            command: echo ${TOTAL_TESTS}
        - run:
            name: "Print failed"
            command: echo $FAILED_TESTS

        - run:
            name: "Print TOTALLL"
            command: echo $TOTALLL

        - run:
            name: "Print TOTALLLL"
            command: echo $TOTALLLL

        - run:
            name: "Print tyt"
            command: echo $tyt

        - run:
            name: "Print BAZ"
            command: echo $BAZ

        - run:
            name: "Print BAZZ"
            command: echo $BAZZ

        - run:
              name: Assert that initially only value from runner environment variable is loaded
              command: |
                echo "VAR1: $VAR1"
                echo "VAR2: $VAR2"
                echo "VAR3: $VAR3"

        - run:
              name: Assert that a value from command overrides value from runner environment variable
              command: |
                export VAR3=value_from_command
                echo "VAR1: $VAR1"
                echo "VAR2: $VAR2"
                echo "VAR3: $VAR3"

        - *step_process_dotenv

        - run:
            name: Assert that values from .env override other values
            command: |
                echo "VAR1: $VAR1"
                echo "VAR2: $VAR2"
                echo "VAR3: $VAR3"

        - run:
            name: Assert that from command overrides values from .env and other values
            command: |
                export VAR3=value_from_command
                echo "VAR1: $VAR1"
                echo "VAR2: $VAR2"
                echo "VAR3: $VAR3"

        - run: echo "VAR2=value2_from_env_updated" >> .env
        - *step_process_dotenv
        - run:
            name: Assert that loading values from .env overrides old values and does not overide command values.
            command: |
                export VAR3=value_from_command
                echo "VAR1: $VAR1"
                echo "VAR2: $VAR2"
                echo "VAR3: $VAR3"


        - slack/notify:
            color: '#ffa500'
            message: for branch *$CIRCLE_BRANCH*\n*Total - $TOTAL_TESTS $tests, Failed - $FAILED_TESTS ${failed}* $MY_ENV_VAR
            webhook: $SLACK_WEBHOOK
